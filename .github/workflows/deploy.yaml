name: Deploy 
on:
  workflow_dispatch:
  push:
    branches:
      dev

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: Run unit tests
        run: |
          echo "Running unit tests"
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.TAG }}
    steps:
      - name: Generate tag
        id: tag
        run: 
          echo "MONGO_URI=$(echo -n ${{ secrets.MONGO_URI }})" >> .env
          echo "SECRET_KEY=$(echo -n ${{ secrets.SECRET_KEY }})" >> .env
          echo "ALGORITHM=$(echo -n ${{ secrets.ALGORITHM }})" >> .env
          echo "ACCESS_TOKEN_EXPIRE_SECONDS=$(echo -n ${{ secrets.ACCESS_TOKEN_EXPIRE_SECONDS }})" >> .env
          echo "DATABASE=$(echo -n ${{ secrets.DATABASE }})" >> .env
          echo "CLIENT_ORIGIN=$(echo -n ${{ secrets.CLIENT_ORIGIN }})" >> .env

      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/lakehouseenterprise-backend:latest
          

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout master
      uses: actions/checkout@main
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: '${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}'

    - name: Get base64 encoded secrets
      id: secrets
      run: |
        echo "::set-output name=mongo_uri::$(echo -n ${{ secrets.MONGO_URI }} | base64)"
        echo "::set-output name=secret_key::$(echo -n ${{ secrets.SECRET_KEY }} | base64)"
        echo "::set-output name=algorithm::$(echo -n ${{ secrets.ALGORITHM }} | base64)"
        echo "::set-output name=access_token_expire_seconds::$(echo -n ${{ secrets.ACCESS_TOKEN_EXPIRE_SECONDS }} | base64)"
        echo "::set-output name=database::$(echo -n ${{ secrets.DATABASE }} | base64)"
        echo "::set-output name=client_origin::$(echo -n ${{ secrets.CLIENT_ORIGIN }} | base64)"
        

    
    - name: Update deployment file
      run: |
       
        sed -i 's/<base64_encoded_secret_key>/'"${{ steps.secrets.outputs.secret_key }}"'/' config/deployment.yaml
        sed -i 's/<base64_encoded_algorithm>/'"${{ steps.secrets.outputs.algorithm }}"'/' config/deployment.yaml
        sed -i 's/<base64_encoded_access_token_expire_seconds>/'"${{ steps.secrets.outputs.access_token_expire_seconds }}"'/' config/deployment.yaml
        sed -i 's/<base64_encoded_database>/'"${{ steps.secrets.outputs.database }}"'/' config/deployment.yaml
        sed -i 's/<base64_encoded_client_origin>/'"${{ steps.secrets.outputs.client_origin }}"'/' config/deployment.yaml

   
  
    - name: Update deployment file
      run: |
        sed -i "s|<IMAGE_NAME>:<TAG>|nexttechglobe/lakehouseenterprise-backend:latest|g" $GITHUB_WORKSPACE/config/deployment.yaml
        cat $GITHUB_WORKSPACE/config/deployment.yaml
    - name: Image path
      run : |
          echo  ${{ secrets.DOCKER_USERNAME }}/lakehouseenterprise-backend:latest

  
    - name: Save DigitalOcean kubeconfig with short-lived credentials
      run: >-
        doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{secrets.CLUSTER_NAME }}
    - name: Deploy to DigitalOcean Kubernetes
      run: |
        kubectl delete -f $GITHUB_WORKSPACE/config/deployment.yaml
        kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yaml
    - name: Verify deployment
      run: kubectl rollout status deployment/lakehouseenterprise-backend


















